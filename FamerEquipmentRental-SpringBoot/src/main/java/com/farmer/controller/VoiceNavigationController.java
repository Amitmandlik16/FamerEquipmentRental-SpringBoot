package com.farmer.controller;

import com.farmer.service.DeepgramService;
import com.farmer.service.voiceNavigationService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/voice-assistant")
public class VoiceNavigationController {

	@Autowired
	private DeepgramService deepgramService;

	@Autowired
	private voiceNavigationService voiceNavigationService;

	@PostMapping("/audio")
	public ResponseEntity<ByteArrayResource> generateSpeech(@RequestParam("file") MultipartFile file,
			@RequestParam("data") String jsonData) {
		try {
			// Parse JSON data to extract farmerId
			Map<String, Object> requestData = voiceNavigationService.parseJsonData(jsonData);

			// Get farmerId from parsed data
			Long farmerId = requestData.containsKey("farmerId") ? Long.parseLong(requestData.get("farmerId").toString())
					: null;

			if (farmerId == null) {
				return ResponseEntity.badRequest().build();
			}

			// Convert MultipartFile to File
			File convertedFile = convertMultipartFileToFile(file);

			// Process audio with farmerId
			ResponseEntity<ByteArrayResource> response = voiceNavigationService.voiceReadProcess(convertedFile,
					farmerId);

			// Clean up temporary file after processing
			convertedFile.delete();

			// Return the response generated by voiceReadProcess()
			return response;

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}

	private File convertMultipartFileToFile(MultipartFile file) throws IOException {
		File convFile = new File(System.getProperty("java.io.tmpdir") + "/" + file.getOriginalFilename());
		try (FileOutputStream fos = new FileOutputStream(convFile)) {
			fos.write(file.getBytes());
		}
		return convFile;
	}
}
